
procedure assigns{
  y = 1 * x;
  y = 1 * x;
  read x;
  y = 1 * x;
  print x;
  y = 1 * x;
  call c;
  y = 1 * x;
  if (q!= 1) then {
    y = 1 * x;
  } else {
    y = 1 * x;
  }
  y = 1 * x;
  while(z>0) {
    y = 1 * x;
  }
  y = 1 * x;
}
procedure ifs{
  if (q!= 1) then {
    y = 1 * x;
  } else {
    y = 1 * x;
  }
  if (q!= 1) then {
    y = 1 * x;
  } else {
    y = 1 * x;
  }
  read x;
  if (q!= 1) then {
    y = 1 * x;
  } else {
    y = 1 * x;
  }
  print x;
  if (q!= 1) then {
    y = 1 * x;
  } else {
    y = 1 * x;
  }
  y = 1 * x;
  if (q!= 1) then {
    y = 1 * x;
  } else {
    y = 1 * x;
  }
  call c;
  if (q!= 1) then {
    if (q!= 1) then {
      y = 1 * x;
    } else {
      y = 1 * x;
    }
  } else {
    y = 1 * x;
  }
  if (q!= 1) then {
    y = 1 * x;
  } else {
    y = 1 * x;
  }
  while(z>0) {
    if (q!= 1) then {
      y = 1 * x;
    } else {
      y = 1 * x;
    }
  }
  if (q!= 1) then {
    y = 1 * x;
  } else {
    y = 1 * x;
  }
}
procedure whiles{
  while(z>0) {
    y = 1 * x;
  }
  while(z>0) {
    y = 1 * x;
  }
  read x;
  while(z>0) {
    y = 1 * x;
  }
  print x;
  while(z>0) {
    y = 1 * x;
  }
  call c;
  while(z>0) {
    y = 1 * x;
  }
  y = 1 * x;
  while(z>0) {
    y = 1 * x;
  }
  if (q!= 1) then {
    while(z>0) {
      y = 1 * x;
    }
  } else {
    y = 1 * x;
  }
  while(z>0) {
    y = 1 * x;
  }
  while(z>0) {
    while(z>0) {
    y = 1 * x;
   }
  }
  while(z>0) {
    y = 1 * x;
  }
}
procedure c {
    print x;
}